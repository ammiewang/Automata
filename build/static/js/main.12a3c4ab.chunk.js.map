{"version":3,"sources":["Automata.js","Routes.js","Conversions.js","Header.js","automataTypes/DFAOps.js","automataTypes/NFAOps.js","automataTypes/RegexOps.js","automataTypes/CFGOps.js","automataTypes/PDAOps.js","inputInfo/DNFAGenerator.js","ApiRoutes.js","inputInfo/AutomataInput.js","inputInfo/DNFAInput.js","results/RegexAns.js","results/DFAns.js","inputInfo/RegexInput.js","inputInfo/CFGInput.js","inputInfo/PDAGenerator.js","inputInfo/PDAInput.js","results/CFGAns.js","results/SetAns.js","results/PDAns.js","results/TableAns.js","App.js","reportWebVitals.js","index.js"],"names":["Automata","className","id","to","React","Component","Routes","home","dfa","nfa","regex","cfg","pda","dnfaGenerator","dnfaInput","regexInput","cfgInput","pdaGenerator","pdaInput","dfaAnswer","regexAnswer","cfgAnswer","pdaAnswer","setsAnswer","tableAnswer","Conversions","dfaToRegex","minDfa","nfaToDfa","regexToDfa","regexComplement","cfgToPda","simplifyGrammar","elimNull","elimUnit","chomsky","greibach","ffpSets","parseTable","leftRecursion","commonSubexpression","pdaToCfg","Header","href","DFAOps","pathname","operation","NFAOps","RegexOps","CFGOps","PDAOps","DNFAGenerator","props","state","from","numStates","startStates","acceptStates","alphabet","showInstructions","onClick","setState","this","htmlFor","type","name","onChange","event","parseInt","target","value","split","location","data","ApiRoutes","AutomataInput","makeFlaskPost","postBody","url","that","fetch","headers","method","body","JSON","stringify","then","res","json","answer","result","makeFlaskPostFromAns","conversionType","determinePath","console","log","DNFAInput","stateNames","makeInitialStates","transitions","makeInitialTransitions","statesArr","i","push","transitionsArr","transitionDict","j","length","entryNum","val","symbol","width","hasOpData","hasPropsData","toString","style","fontWeight","map","letter","Array","keys","row","col","changeStateName","changeTransitionEntry","bind","fromInput","RegexAns","prevProps","DFAns","startState","hasStateData","includes","RegexInput","CFGInput","changeAtIndexProductions","index","productions","changeAtIndexNonterminals","nonterminals","addRow","PDAGenerator","stackAlphabet","initStackSym","PDAInput","changeAtIndex","transitionNum","CFGAns","setSelection","selection","text","opSelection","opSelectionText","showOps","rules","startSym","Object","nt","join","SetAns","firsts","follows","predicts","paddingRight","paddingLeft","PDAns","inputAlphabet","initStackSymbol","TableAns","terminals","table","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12a3c4ab.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport { Link } from 'react-router-dom'\n\nexport default class Automata extends React.Component{\n  render(){\n    return (\n      <div className=\"wrapper\">\n        <header className=\"wrapper\">\n          <title>Automata</title>\n        </header>\n        <div id=\"automata\" className=\"wrapper\">\n          <h1 className='mainTitle'>AUTOMATA</h1>\n          <h2>CHOOSE INPUT TYPE</h2>\n          <div className='buttonLink'>\n            <Link to='/dfa'><button id=\"dfa\" className=\"circle main button\">DFA</button></Link>\n          </div>\n          <div className='buttonLink'>\n          <Link to='/nfa'><button id=\"nfa\" className=\"circle main button\">NFA</button></Link>\n          </div>\n          <div className='buttonLink'>\n            <Link to='/regex'><button id=\"re\" className=\"circle main button\">RegEx</button></Link>\n          </div>\n          <div className='buttonLink'>\n            <Link to='/cfg'><button id=\"cfg\" className=\"circle main button\">CFG</button></Link>\n          </div>\n          <div className='buttonLink'>\n            <Link to='/pda'><button id=\"pda\" className=\"circle main button\">PDA</button></Link>\n          </div>\n       </div>\n      </div>\n    )\n  }\n}\n","export default class Routes {\n  static home = '/'\n  static dfa = '/dfa'\n  static nfa = '/nfa'\n  static regex = '/regex'\n  static cfg = '/cfg'\n  static pda = '/pda'\n  static dnfaGenerator = '/dnfa/generator'\n  static dnfaInput = '/dnfa/input'\n  static regexInput = '/regex/input'\n  static cfgInput = '/cfg/input'\n  static pdaGenerator = '/pda/generator'\n  static pdaInput = '/pda/input'\n  static dfaAnswer = '/dfa/answer'\n  static regexAnswer = '/regex/answer'\n  static cfgAnswer = '/cfg/answer'\n  static pdaAnswer = '/pda/answer'\n  static setsAnswer = '/sets/answer'\n  static tableAnswer = '/table/answer'\n}\n","export default class Conversions {\n  static dfaToRegex = 'dfa2re'\n  static minDfa = 'mindfa'\n  static nfaToDfa = 'nfa2dfa'\n  static regexToDfa = 're2dfa'\n  static regexComplement = 'recomp'\n  static cfgToPda = 'cfg2pda'\n  static simplifyGrammar = 'simgram'\n  static elimNull = 'elimNull'\n  static elimUnit = 'elimUnit'\n  static chomsky = 'cnf'\n  static greibach = 'gnf'\n  static ffpSets = 'ffpSets'\n  static parseTable = 'parseTable'\n  static leftRecursion = 'leftRec'\n  static commonSubexpression = 'comSub'\n  static pdaToCfg = 'pda2cfg'\n}\n","import React from 'react'\nimport Conversions from './Conversions'\nimport Routes from './Routes'\nimport './App.css'\n\nexport default class Header extends React.Component {\n  render () {\n    return (\n      <div className=\"header\">\n        <div><a href=\"/\">HOME</a></div>\n        <div><div className=\"header circle\" /></div>\n        <div><a href=\"/dfa\">DFA</a></div>\n        <div><div className=\"header circle\" /></div>\n        <div><a href=\"/nfa\">NFA</a></div>\n        <div><div className=\"header circle\" /></div>\n        <div><a href=\"/regex\">REGEX</a></div>\n        <div><div className=\"header circle\" /></div>\n        <div><a href=\"/cfg\">CFG</a></div>\n        <div><div className=\"header circle\" /></div>\n        <div><a href=\"/pda\">PDA</a></div>\n      </div>\n  )}\n}\n","import React from 'react'\nimport '../App.css';\nimport { Link } from 'react-router-dom'\nimport Routes from '../Routes'\nimport Header from '../Header'\n\nexport default class DFAOps extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header/>\n        <div id=\"operation\" className=\"wrapper\">\n          <h1 className='dfaTitle'>DETERMINISTIC FINITE AUTOMATON</h1>\n          <h2>CHOOSE OPERATION</h2>\n          <div id=\"dfaop\" className=\"wrapper\">\n            <div className='buttonLink'>\n               <Link to={{\n                 pathname: Routes.dnfaGenerator,\n                 operation: 'dfa2re'\n               }}>\n                  <button id=\"dfa2re\" className=\"circle dfa button\">DFA to RegEx</button>\n              </Link>\n            </div>\n            <div className='buttonLink'>\n              <Link to={{\n                pathname: Routes.dnfaGenerator,\n                operation: 'mindfa'\n              }}>\n                <button id=\"mindfa\" className=\"circle dfa button\">Minimize DFA</button>\n              </Link>\n            </div>\n         </div>\n      </div>\n    </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport { Link } from 'react-router-dom'\nimport Header from '../Header'\n\nexport default class NFAOps extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <div id=\"operation\" className=\"wrapper\">\n          <h1 className='nfaTitle'>NONDETERMINISTIC FINITE AUTOMATON</h1>\n          <h2>CHOOSE OPERATION</h2>\n          <div id=\"nfaop\" className=\"wrapper\">\n            <Link to={{\n              pathname: '/dnfa/generator',\n              operation: 'nfa2dfa'\n            }}>\n               <button id=\"nfa2dfa\" className=\"circle nfa button\">NFA to DFA</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport { Link } from 'react-router-dom'\nimport Header from '../Header'\n\nexport default class RegexOps extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <div id=\"operation\" className=\"wrapper\">\n          <h1 className='regexTitle'>REGULAR EXPRESSION</h1>\n          <h2>CHOOSE OPERATION</h2>\n          <div id=\"reop\" className=\"wrapper\">\n            <div className='buttonLink'>\n              <Link to={{\n                pathname: '/regex/input',\n                operation: 're2dfa'\n              }}>\n                 <button id=\"re2dfa\" className=\"circle regex button\">RegEx to DFA</button>\n              </Link>\n            </div>\n            <div className='buttonLink'>\n              <Link to={{\n                pathname: '/regex/input',\n                operation: 'recomp'\n              }}>\n                 <button id=\"recomp\" className=\"circle regex button\">RegEx Complement</button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport { Link } from 'react-router-dom'\nimport Routes from '../Routes'\nimport Header from '../Header'\n\nexport default class CFGOps extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <div id=\"operation\" className=\"wrapper\">\n          <h1 className='cfgTitle'>CONTEXT FREE GRAMMAR</h1>\n          <h2>CHOOSE OPERATION</h2>\n          <div id=\"cfgop\" className=\"wrapper flexContainer\">\n            <div className=\"buttonLink\">\n              <Link to={{\n                pathname: Routes.cfgInput,\n                operation: 'cfg2pda'\n              }}>\n                <button id=\"cfg2pda\" className=\"circle cfg button\">CFG to PDA</button>\n              </Link>\n            </div>\n            <div className=\"buttonLink\">\n              <Link to={{\n                pathname: Routes.cfgInput,\n                operation: 'simgram'\n              }}>\n                <button id=\"simgram\" className=\"circle cfg button\">Simplify Grammar</button>\n              </Link>\n            </div>\n            <div className=\"buttonLink\">\n              <Link to={{\n                pathname: Routes.cfgInput,\n                operation: 'elimNull'\n              }}>\n                <button id=\"elim_null\" className=\"circle cfg button\">\n                  Eliminate Null Productions\n                </button>\n              </Link>\n            </div>\n            <div className=\"buttonLink\">\n              <Link to={{\n                pathname: Routes.cfgInput,\n                operation: 'elimUnit'\n              }}>\n                <button id=\"elim_unit\" className=\"circle cfg button\">\n                  Eliminate Unit Productions\n                </button>\n              </Link>\n            </div>\n            <div className=\"buttonLink\">\n              <Link to={{\n                pathname: Routes.cfgInput,\n                operation: 'cnf'\n              }}>\n                <button id=\"cnf\" className=\"circle cfg button\">Chomsky Normal Form</button>\n              </Link>\n            </div>\n            <div className=\"buttonLink\">\n              <Link to={{\n                pathname: Routes.cfgInput,\n                operation: 'gnf'\n              }}>\n                <button id=\"gnf\" className=\"circle cfg button\">Greibach Normal Form</button>\n              </Link>\n            </div>\n            <div className=\"buttonLink\">\n              <Link to={{\n                pathname: Routes.cfgInput,\n                operation: 'ffpSets'\n              }}>\n                <button id=\"first_follow_predict\" className=\"circle cfg button\">First, Follow, and Predict Sets</button>\n              </Link>\n            </div>\n            <div className=\"buttonLink\">\n              <Link to={{\n                pathname: Routes.cfgInput,\n                operation: 'parseTable'\n              }}>\n                <button id=\"parseTable\" className=\"circle cfg button\">Parse Table</button>\n              </Link>\n            </div>\n            <div className=\"buttonLink\">\n              <Link to={{\n                pathname: Routes.cfgInput,\n                operation: 'leftRec'\n              }}>\n                <button id=\"leftRec\" className=\"circle cfg button\">Remove Left Recursion</button>\n              </Link>\n            </div>\n            <div className=\"buttonLink\">\n              <Link to={{\n                pathname: Routes.cfgInput,\n                operation: 'comSub'\n              }}>\n                <button id=\"comSub\" className=\"circle cfg button\">Eliminate Common Subexpression</button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport {Link} from 'react-router-dom'\nimport Header from '../Header'\n\nexport default class PDAOps extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header/>\n        <div id=\"operation\" className=\"wrapper\">\n          <h1 className='pdaTitle'>PUSHDOWN AUTOMATON</h1>\n          <h2>CHOOSE OPERATION</h2>\n          <div id=\"pdaop\" className=\"wrapper\">\n            <Link to={{\n              pathname: '/pda/generator',\n              operation: 'pda2cfg'\n            }}>\n              <button id=\"pda2cfg\" className=\"circle pda button\">PDA to CFG</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport { Link } from 'react-router-dom'\nimport Header from '../Header'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  from: string,\n  numStates: number,\n  startStates: any, //any change to startStates\n  acceptStates: Array<any>,\n  alphabet: Array<any>,\n  showInstructions: boolean\n}\n\nexport default class DNFAGenerator extends React.Component {\n  constructor(props:Props){\n    super(props)\n    this.state = ({\n      from: null,\n      numStates: null,\n      startStates: null,\n      acceptStates: null,\n      alphabet: null,\n      showInstructions: false\n    })\n  }\n\n  render() {\n    return (\n      <div id=\"dnfa_gen\">\n        <Header/>\n        <h1 className='dnfaChartTitle'>DFA/NFA CHART GENERATOR</h1>\n        <h3 onClick={ () => {\n          var showInstructions = this.state.showInstructions\n          this.setState({ showInstructions: !showInstructions })\n        }}>\n          {'INSTRUCTIONS ' + (this.state.showInstructions ? '↑' : '↓')}\n        </h3>\n        {this.state.showInstructions && (\n          <div className=\"instructions\">Separate multiple states or alphabet characters by space.</div>\n        )}\n        <div className=\"inputBox\">\n          <div><label htmlFor=\"num_states\">NUMBER OF STATES:</label></div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"num_states\"\n              name=\"num_states\"\n              onChange={(event) => {\n                this.setState({ numStates: parseInt(event.target.value) })\n              }}/>\n            <br/><br/>\n          </div>\n          <div><label htmlFor=\"ss\">START STATE(S):</label></div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"ss\"\n              name=\"ss\"\n              onChange={(event) => {\n                this.setState({ startStates: event.target.value })\n              }}/>\n            <br/><br/>\n          </div>\n          <div><label htmlFor=\"accs\">ACCEPT STATE(S):</label></div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"accs\"\n              name=\"accs\"\n              onChange={(event) => {\n                this.setState({ acceptStates: (event.target.value).split(\" \") })\n              }}/>\n            <br/><br/>\n          </div>\n          <div><label htmlFor=\"alphabet\">ALPHABET:</label></div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"alphabet\"\n              name=\"alphabet\"\n              onChange={(event) => {\n                this.setState({ alphabet: (event.target.value).split(\" \") })\n              }}/>\n            <br/><br/>\n          </div>\n        </div>\n        <div className=\"wrapper\">\n          <Link to={{\n            pathname:'/dnfa/input',\n            operation: this.props.location && this.props.location.operation ?\n              this.props.location.operation : null,\n            data: {\n              numStates: this.state.numStates,\n              startStates: this.state.startStates,\n              acceptStates: this.state.acceptStates,\n              alphabet: this.state.alphabet\n            }\n          }}>\n            <button id=\"enter_dnfa_gen\" className=\"enterButton\">Enter</button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n}\n","export default class ApiRoutes {\n  static dnfaInput = '/api/dnfa/input'\n  static regexInput = '/api/regex/input'\n  static cfgInput = '/api/cfg/input'\n  static pdaInput = '/api/pda/input'\n}\n","import React from 'react'\nimport Conversions from '../Conversions'\nimport Routes from '../Routes'\n\nclass AutomataInput extends React.Component<Props,State> {\n\n  makeFlaskPost = (postBody, url) => {\n    var that = this\n\n    fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: JSON.stringify(postBody)\n    })\n    .then(res => {return res.json()})\n    .then(data => {that.setState({ answer: data.result })})\n  }\n\n  makeFlaskPostFromAns = (postBody, url, conversionType) => {\n    postBody.conversionType = conversionType\n    this.setState({conversionType: conversionType})\n    this.makeFlaskPost(postBody, url)\n  }\n\n  determinePath = (operation) => {\n    var url = '#'\n    if (operation !== '') {\n      if (operation === Conversions.dfaToRegex || operation === Conversions.regexComplement) {\n        url = Routes.regexAnswer\n      } else if (operation === Conversions.minDfa || operation === Conversions.nfaToDfa\n        || operation === Conversions.regexToDfa) {\n        url = Routes.dfaAnswer\n      } else if (operation === Conversions.simplifyGrammar || operation === Conversions.elimNull\n        || operation === Conversions.elimUnit || operation === Conversions.chomsky\n        || operation === Conversions.greibach || operation === Conversions.leftRecursion\n        || operation === Conversions.commonSubexpression || operation === Conversions.pdaToCfg) {\n        console.log('hereee')\n        url = Routes.cfgAnswer\n      } else if (operation === Conversions.cfgToPda) {\n        url = Routes.pdaAnswer\n      } else if (operation === Conversions.ffpSets) {\n        url = Routes.setsAnswer\n      } else if (operation === Conversions.parseTable) {\n        url = Routes.tableAnswer\n      }\n    }\n\n    return url\n  }\n\n} export default AutomataInput;\n","import React from 'react'\nimport '../App.css';\nimport { Link, Redirect } from 'react-router-dom'\nimport ApiRoutes from '../ApiRoutes'\nimport Routes from '../Routes'\nimport AutomataInput from './AutomataInput'\nimport Header from '../Header'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  stateNames: Array<any>,\n  transitions: Array<any>, //any //Array<Array<any>>\n  answer: any,\n  showInstructions: boolean\n}\n\nexport default class DNFAInput extends AutomataInput {\n  constructor(props:Props){\n    super(props)\n    this.state = ({\n      stateNames: this.makeInitialStates(),//this.makeInitialStates(),\n      transitions: this.makeInitialTransitions(),\n      showInstructions: false\n    })\n  }\n\n  componentDidMount(){\n    return true\n  }\n\n  makeInitialStates(){\n    var statesArr = []\n    if (this.props.location && this.props.location.data){\n      for (let i = 0; i < this.props.location.data.numStates; i++){\n        statesArr.push(null)\n      }\n    }\n    return statesArr\n  }\n\n  makeInitialTransitions(){\n    var transitionsArr = []\n    if (this.props.location && this.props.location.data){\n      for (let i = 0; i < this.props.location.data.numStates; i++){\n        var transitionDict = {}\n        for (let j = 0; j < this.props.location.data.alphabet.length; j++){\n          transitionDict[this.props.location.data.alphabet[j]] = null\n        }\n        transitionsArr.push(transitionDict)\n      }\n    }\n    return transitionsArr\n  }\n\n  changeStateName(entryNum, val) {\n    var statesArr = this.state.stateNames\n    statesArr[entryNum] = val\n    this.setState({\n      stateNames: statesArr\n    })\n  }\n\n  changeTransitionEntry(entryNum, symbol, val) {\n    var transitionsArr = this.state.transitions\n    transitionsArr[entryNum][symbol] = val\n    this.setState({\n      transitions: transitionsArr\n    })\n  }\n\n  willRender() {\n    return true\n  }\n\n  render() {\n    var width\n    var hasOpData = this.props.location && this.props.location.operation\n    var hasPropsData = this.props.location && this.props.location.data\n    if (hasPropsData){\n      width = 238*(this.props.location.data.alphabet.length) + 100\n      width = width.toString() + 'px'\n    } else {\n      width = '100%'\n    }\n    return (\n      <div id=\"dnfa_inp\" className=\"wrapper\">\n        <Header/>\n        <h1 className='dnfaInput'>DFA/NFA INPUT</h1>\n        <h3 onClick={ () => {\n          var showInstructions = this.state.showInstructions\n          this.setState({ showInstructions: !showInstructions })\n        }}>\n          {'INSTRUCTIONS ' + (this.state.showInstructions ? '↑' : '↓')}\n        </h3>\n        {this.state.showInstructions && (\n          <div>\n            <div className=\"instructions\">\n              {\"For a DFA/NFA with states {q0, ..., qn}, write each state name in a separate box in the first column.\"}\n            </div>\n            <div className=\"instructions\">\n              {\"For deterministic transition δ(q0, a) = q1, type q1 in the row for q0 and the column for character a.\"}\n            </div>\n            <div className=\"instructions\">\n              {\"For nondeterministic transition δ(q0, a) = {q1, ..., qm}, type q1,\"}\n              {\"..., qn in the row for q0 and the column for character a, separated by space.\"}\n            </div>\n            <div className=\"instructions\" style={{ fontWeight: 'bold'}}>\n              {\"To represent the empty transition, use ε (this one can be copy/pasted).\"}\n            </div>\n          </div>\n        )}\n        <div className='dfaBox' style={{ width: width }}>\n          { hasPropsData && (\n            <table id='original_table' className='center'>\n              <thead>\n                <tr>\n                  <th>State</th>\n                  {this.props.location.data.alphabet.map( (letter) => (\n                    <th key={letter}>{letter}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n              {\n                Array.from(Array(this.props.location.data.numStates).keys()).map( (row) => (\n                  <tr>\n                    {\n                      Array.from(Array(this.props.location.data.alphabet.length + 1).keys()).map((col) => (\n                        <td>\n                          { col === 0 && (\n                            <input\n                              type='text'\n                              className='smallbox'\n                              key={row + ' ' + col}\n                              onChange={ (event) => {this.changeStateName(row, event.target.value)} }\n                              />\n                          )}\n                          { col !== 0 && (\n                            <input\n                              type='text'\n                              key={row + ' ' + col}\n                              onChange={ (event) => {\n                                this.changeTransitionEntry(row, this.props.location.data.alphabet[col-1], event.target.value)\n                              }}/>\n                          )}\n                        </td>\n                      ))\n                    }\n                  </tr>\n                ))\n              }\n              </tbody>\n            </table>\n            )\n          }\n        </div>\n\n        { !this.state.answer && (\n          <button\n          id=\"enter_dnfa_inp\"\n          className=\"enterButton\"\n          onClick={this.makeFlaskPost.bind(null, ({\n            conversionType: this.props.location.operation,\n            fromInput: true,\n            stateNames: this.state.stateNames,\n            transitions: this.state.transitions,\n            alphabet: hasPropsData ? this.props.location.data.alphabet : [],\n            startStates: hasPropsData ? this.props.location.data.startStates : null,\n            acceptStates: hasPropsData ? this.props.location.data.acceptStates : []\n          }), ApiRoutes.dnfaInput)}\n          >\n            Enter\n          </button>\n        )}\n\n        { this.state.answer &&\n          <Redirect to={{\n            pathname: this.determinePath(hasOpData ? this.props.location.operation : ''),\n            answer: this.state.answer\n          }} />\n        }\n\n\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport {Redirect} from 'react-router-dom'\nimport ApiRoutes from '../ApiRoutes'\nimport Routes from '../Routes'\nimport AutomataInput from '../inputInfo/AutomataInput'\nimport Conversions from '../Conversions'\nimport Header from '../Header'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  regex: string\n}\n\nexport default class RegexAns extends AutomataInput {\n  constructor(props:Props){\n    super(props)\n    this.state = {\n      regex: ''\n    }\n  }\n\n  componentDidMount (){\n    if (this.props.location && this.props.location.answer){\n      this.setState({\n        regex: this.props.location.answer\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.location && this.props.location.answer &&\n      this.props.location.answer !== prevProps.location.answer){\n      this.setState({\n        regex: this.props.location.answer\n      })\n    }\n  }\n\n  render() {\n    var postBody = {\n      regex: this.state.regex\n    }\n    return (\n      <div id=\"reg_ans_pg\" className=\"wrapper\">\n        <Header/>\n        <h1 className='regex'>REGEX RESULT</h1>\n        <div className=\"regexBox\">\n          <input\n            type=\"text\"\n            id=\"reg_ans\"\n            onChange={ (event) => {} }\n            value={this.state.regex && (\n              this.state.regex\n            )}/><br/><br/>\n        </div>\n        { !this.state.answer && (\n          <div>\n            <button\n            className=\"enterButton\"\n            onClick={this.makeFlaskPostFromAns.bind(null, postBody,\n              ApiRoutes.regexInput, Conversions.regexToDfa)}\n            >\n              Regex to DFA\n            </button>\n            <button\n            className=\"enterButton\"\n            onClick={this.makeFlaskPostFromAns.bind(null, postBody,\n              ApiRoutes.regexInput, Conversions.regexComplement)}\n            >\n              Complement Regex\n            </button>\n          </div>\n        )}\n\n        { this.state.answer && this.state.conversionType &&\n          <Redirect to={{\n            pathname: this.determinePath(this.state.conversionType ? this.state.conversionType : ''),\n            answer: this.state.answer\n          }}\n            onClick={this.setState({ answer: null })}/>\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport { Link, Redirect } from 'react-router-dom'\nimport ApiRoutes from '../ApiRoutes'\nimport Routes from '../Routes'\nimport AutomataInput from '../inputInfo/AutomataInput'\nimport Conversions from '../Conversions'\nimport Header from '../Header'\n//import DNFAInput from '../inputInfo/DNFAInput'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  alphabet: Array<string>, //change to arr<any>??\n  transitions: Array<any>, //might not be correct type? use any?\n  startState: string, //any?\n  acceptStates: Array<string>, //change to arr<any>??\n  stateNames: Array<string> //change to arr<any>??\n}\n\nexport default class DFAns extends AutomataInput {\n  constructor(props:Props){\n    super(props)\n    console.log('in constructor')\n    this.state = {\n      alphabet: [],\n      transitions: [],\n      startState: null,\n      acceptStates: [],\n      stateNames: []\n    }\n  }\n\n  componentDidMount (){\n    if (this.props.location && this.props.location.answer){\n      this.setState({\n        alphabet: this.props.location.answer.alphabet,\n        transitions: this.props.location.answer.transitions,\n        startState: this.props.location.answer.startState,\n        acceptStates: this.props.location.answer.acceptStates,\n        stateNames: this.props.location.answer.stateNames\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.location && this.props.location.answer &&\n      this.props.location.answer.alphabet && !prevProps.location.answer.alphabet){\n      this.setState({\n        alphabet: this.props.location.answer.alphabet,\n        transitions: this.props.location.answer.transitions,\n        startState: this.props.location.answer.startState,\n        acceptStates: this.props.location.answer.acceptStates,\n        stateNames: this.props.location.answer.stateNames\n      })\n    }\n  }\n\n  // makeFlaskPostFromAns = (postBody, url, conversionType) => {\n  //   postBody.conversionType = conversionType\n  //   this.setState({conversionType: conversionType})\n  //   this.makeFlaskPost(postBody, url)\n  // }\n\n  render() {\n    var width\n    var hasStateData = this.state.alphabet\n    if (hasStateData){\n      width = 250*(this.state.alphabet.length) + 100\n      width = width.toString() + 'px'\n      // console.log(this.state.transitions)\n    } else {\n      width = '100%'\n    }\n\n    var postBody = {\n      fromInput: false,\n      stateNames: this.state.stateNames,\n      transitions: this.state.transitions,\n      alphabet: this.state.alphabet,\n      startStates: this.state.startState,\n      acceptStates: this.state.acceptStates\n    }\n\n    return (\n      <div id=\"dnfa_ans\" className=\"wrapper\">\n        <Header/>\n        <h1 className='dnfaInput'>DFA Answer</h1>\n        <div className='dfaBox' style={{ width: width }}>\n          { hasStateData && (\n            <table id='ans_table' className='center'>\n              <thead>\n                <tr>\n                  <th>State</th>\n                  {this.state.alphabet.map( (letter) => (\n                    <th key={letter}>{letter}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n              {\n                Array.from(Array(this.state.stateNames.length).keys()).map( (row) => (\n                  <tr>\n                    {\n                      Array.from(Array(this.state.alphabet.length + 1).keys()).map((col) => (\n                        <td>\n                          { col === 0 && (\n                            <label key={this.state.stateNames[row]}>\n                              {this.state.stateNames[row] === this.state.startState ? '→ ' : '' }\n                              {this.state.stateNames[row]}\n                              {this.state.acceptStates.includes(this.state.stateNames[row]) ? ' F' : ''}\n                            </label>\n                          )}\n                          { col !== 0 && (\n                            <input\n                              type='text'\n                              key={row + ' ' + col}\n                              onChange={ (event) => {} }\n                              value={this.state.transitions[this.state.stateNames[row]][this.state.alphabet[col-1]] && (\n                                this.state.transitions[this.state.stateNames[row]][this.state.alphabet[col-1]]\n                              )}/>\n                          )}\n                        </td>\n                      ))\n                    }\n                  </tr>\n                ))\n              }\n              </tbody>\n            </table>\n            )\n          }\n        </div>\n        { !this.state.answer && (\n          <div>\n            <button\n            className=\"enterButton\"\n            onClick={this.makeFlaskPostFromAns.bind(null, postBody,\n              ApiRoutes.dnfaInput, Conversions.dfaToRegex)}\n            >\n              DFA to RegEx\n            </button>\n            <button\n            className=\"enterButton\"\n            onClick={this.makeFlaskPostFromAns.bind(null, postBody,\n              ApiRoutes.dnfaInput, Conversions.minDfa)}\n            >\n              Minimize DFA\n            </button>\n          </div>\n        )}\n\n        { this.state.answer && this.state.conversionType &&\n          <Redirect to={{\n            pathname: this.determinePath(this.state.conversionType ? this.state.conversionType : ''),\n            answer: this.state.answer\n          }}\n            onClick={this.setState({ answer: null })} />\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport {Link, Redirect} from 'react-router-dom'\nimport ApiRoutes from '../ApiRoutes'\nimport AutomataInput from './AutomataInput'\nimport Header from '../Header'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  regex: string,\n  showInstructions: boolean\n}\n\nexport default class RegexInput extends AutomataInput {\n  constructor(props:Props){\n    super(props)\n    this.state = ({\n      regex: '',\n      showInstructions: false\n    })\n  }\n\n  render() {\n    var hasOpData = this.props.location && this.props.location.operation\n    return (\n      <div id=\"reg_inp_pg\" className=\"wrapper\">\n        <Header/>\n        <h1 className='regex'>REGEX INPUT</h1>\n        <h3 onClick={ () => {\n          var showInstructions = this.state.showInstructions\n          this.setState({ showInstructions: !showInstructions })\n        }}>\n          {'INSTRUCTIONS ' + (this.state.showInstructions ? '↑' : '↓')}\n        </h3>\n        {this.state.showInstructions && (\n          <div>\n            <div className=\"instructions\">\n              This tool handles regular expressions which use concatention, union, and/or Kleene star.\n            </div>\n            <div className=\"instructions\">\n              <span>(), ab</span> {' = concatention, '}\n              <span>+</span> {' = union, '}\n              <span>*</span>{' = Kleene star'}\n            </div>\n            <div className=\"instructions\" style={{ fontWeight: 'bold'}}>\n              {\"To represent the empty string, use ε (this one can be copy/pasted).\"}\n            </div>\n          </div>\n        )}\n        <div className=\"regexBox\">\n          <input\n            type=\"text\"\n            id=\"reg_ans\"\n            onChange={ (event) => {this.setState({ regex: event.target.value })} }\n            /><br/><br/>\n        </div>\n        { !this.state.answer && (\n          <button\n          id=\"enter_dnfa_inp\"\n          className=\"enterButton\"\n          onClick={this.makeFlaskPost.bind(null, ({\n            conversionType: this.props.location.operation,\n            regex: this.state.regex\n          }), ApiRoutes.regexInput)}\n          >\n            Enter\n          </button>\n        )}\n\n        { this.state.answer &&\n          <Redirect to={{\n            pathname: this.determinePath(hasOpData ? this.props.location.operation : ''),\n            answer: this.state.answer\n          }} />\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport {Link, Redirect} from 'react-router-dom'\nimport ApiRoutes from '../ApiRoutes'\nimport AutomataInput from './AutomataInput'\nimport Header from '../Header'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  nonterminals: Array<any>,\n  productions: Array<any>,\n  showInstructions: boolean\n}\n\nexport default class CFGInput extends AutomataInput {\n  constructor(props:Props){\n    super(props)\n    this.state = ({\n      productions: [null],\n      nonterminals: [null],\n      showInstructions: false\n    })\n  }\n\n  changeAtIndexProductions = (index, val) => {\n    var productions = this.state.productions\n    productions[index] = val\n    this.setState({\n      productions: productions\n    })\n  }\n\n  changeAtIndexNonterminals = (index, val) => {\n    var nonterminals = this.state.nonterminals\n    nonterminals[index] = val\n    this.setState({\n      nonterminals: nonterminals\n    })\n  }\n\n  addRow = () => {\n    var productions = this.state.productions\n    var nonterminals = this.state.nonterminals\n    productions.push(null)\n    nonterminals.push(null)\n    this.setState({\n      productions: productions,\n      nonterminals: nonterminals\n    })\n  }\n\n  render() {\n    var hasOpData = this.props.location && this.props.location.operation\n    return (\n      <div id=\"cfg_inp_pg\" className=\"wrapper\">\n        <Header/>\n        <h1 className='regex'>CFG INPUT</h1>\n        <h3 onClick={ () => {\n          var showInstructions = this.state.showInstructions\n          this.setState({ showInstructions: !showInstructions })\n        }}>\n          {'INSTRUCTIONS ' + (this.state.showInstructions ? '↑' : '↓')}\n        </h3>\n        {this.state.showInstructions && (\n          <div>\n            <div className=\"instructions\">\n              On the LHS, mark the starting nonterminal with an asterisk, *. If the starting nonterminal is S, write S* on the LHS.\n            </div>\n            <div className=\"instructions\">\n              Separate all characters by space (A0 → a A1 b). Separate different productions from the same\n              nonterminal with a bar, |. For example, (A0 → a A1 b | a b). Different productions from the same\n              nonterminal may also be separated onto different lines (A0 → a A1 b; A0 → a b).\n            </div>\n            <div className=\"instructions\" style={{ fontWeight: 'bold'}}>\n              {\"To represent the empty string, use ε (this one can be copy/pasted).\"}\n            </div>\n          </div>\n        )}\n        <div className=\"cfgBox\">\n          {this.state.nonterminals && (\n            <table className=\"center\" id=\"pda_inp_table\">\n            <tbody id=\"pda_tab_body\">\n              {Array.from(Array(this.state.nonterminals.length).keys()).map( (row) => (\n                <tr>\n                  <td className=\"input\">\n                    <input\n                      type=\"text\"\n                      className=\"smallbox\"\n                      onChange={ event => this.changeAtIndexNonterminals(row, event.target.value) }\n                    />\n                    <label className=\"biglabel\"> → </label>\n                    <input\n                      type=\"text\"\n                      onChange={ event => this.changeAtIndexProductions(row, event.target.value) }\n                    />\n                  </td>\n                </tr>\n              ))}\n\n            </tbody>\n          </table>)}\n        </div>\n        <button onClick={this.addRow.bind(null)} className=\"enterButton\">+</button>\n        { !this.state.answer && (\n          <button\n          id=\"enter_cfg_inp\"\n          className=\"enterButton\"\n          onClick={this.makeFlaskPost.bind(null, ({\n            fromInput: true,\n            conversionType: this.props.location.operation,\n            nonterminals: this.state.nonterminals,\n            productions: this.state.productions\n          }), ApiRoutes.cfgInput)}\n          >\n            Enter\n          </button>\n        )}\n\n        { this.state.answer &&\n          <Redirect to={{\n            pathname: this.determinePath(hasOpData ? this.props.location.operation : ''),\n            answer: this.state.answer\n          }} />\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport { Link } from 'react-router-dom'\nimport Header from '../Header'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  numStates: number,\n  startStates: any, //any change to startStates\n  acceptStates: Array<any>,\n  alphabet: Array<any>,\n  stackAlphabet: Array<any>,\n  initStackSym: any,\n  showInstructions: boolean\n}\n\nexport default class PDAGenerator extends React.Component {\n  constructor(props:Props){\n    super(props)\n    this.state = ({\n      numStates: null,\n      startStates: null,\n      acceptStates: null,\n      alphabet: null,\n      stackAlphabet: null,\n      initStackSym: null,\n      showInstructions: false\n    })\n  }\n\n  render() {\n    return (\n      <div id=\"dnfa_gen\">\n        <Header/>\n        <h1 className='dnfaChartTitle'>PDA CHART GENERATOR</h1>\n        <h3 onClick={ () => {\n          var showInstructions = this.state.showInstructions\n          this.setState({ showInstructions: !showInstructions })\n        }}>\n          {'INSTRUCTIONS ' + (this.state.showInstructions ? '↑' : '↓')}\n        </h3>\n        {this.state.showInstructions && (\n          <div className=\"instructions\">Separate multiple states or alphabet characters by space. Choose a one character initial stack symbol.</div>\n        )}\n        <div className=\"inputBox\">\n          <div><label htmlFor=\"num_states\">NUMBER OF STATES:</label></div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"num_states\"\n              name=\"num_states\"\n              onChange={(event) => {\n                this.setState({ numStates: parseInt(event.target.value) })\n              }}/>\n            <br/><br/>\n          </div>\n          <div><label htmlFor=\"ss\">START STATE(S):</label></div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"ss\"\n              name=\"ss\"\n              onChange={(event) => {\n                this.setState({ startStates: event.target.value })\n              }}/>\n            <br/><br/>\n          </div>\n          <div><label htmlFor=\"accs\">ACCEPT STATE(S):</label></div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"accs\"\n              name=\"accs\"\n              onChange={(event) => {\n                this.setState({ acceptStates: (event.target.value).split(\" \") })\n              }}/>\n            <br/><br/>\n          </div>\n          <div><label htmlFor=\"alphabet\">INPUT ALPHABET:</label></div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"alphabet\"\n              name=\"alphabet\"\n              onChange={(event) => {\n                this.setState({ alphabet: (event.target.value).split(\" \") })\n              }}/>\n            <br/><br/>\n          </div>\n          <div><label htmlFor=\"stackAlphabet\">STACK ALPHABET:</label></div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"stackAlphabet\"\n              name=\"stackAlphabet\"\n              onChange={(event) => {\n                this.setState({ stackAlphabet: (event.target.value).split(\" \") })\n              }}/>\n            <br/><br/>\n          </div>\n          <div><label htmlFor=\"initStackSym\">INITIAL STACK SYMBOL:</label></div>\n          <div>\n            <input\n              type=\"text\"\n              id=\"initStackSym\"\n              name=\"initStackSym\"\n              onChange={(event) => {\n                this.setState({ initStackSym: event.target.value })\n              }}/>\n            <br/><br/>\n          </div>\n        </div>\n\n        <div className=\"wrapper\">\n          <Link to={{\n            pathname:'/pda/input',\n            operation: this.props.location && this.props.location.operation ?\n              this.props.location.operation : null,\n            data: {\n              numStates: this.state.numStates,\n              startStates: this.state.startStates,\n              acceptStates: this.state.acceptStates,\n              alphabet: this.state.alphabet,\n              stackAlphabet: this.state.stackAlphabet,\n              initStackSym: this.state.initStackSym\n            }\n          }}>\n            <button id=\"enter_dnfa_gen\" className=\"enterButton\">Enter</button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport { Redirect } from 'react-router-dom'\nimport ApiRoutes from '../ApiRoutes'\nimport AutomataInput from './AutomataInput'\nimport Header from '../Header'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  transitions: Array<Array<any>>,\n  showInstructions: boolean\n  //answer: any\n}\n\nexport default class PDAInput extends AutomataInput {\n  constructor(props:Props){\n    super(props)\n    this.state = ({\n      transitions: [[null, null, null, null, null]],\n      showInstructions: false\n    })\n  }\n\n  addRow = () => {\n    var transitions = this.state.transitions\n    transitions.push([null, null, null, null, null])\n    this.setState({\n      transitions: transitions\n    })\n  }\n\n  changeAtIndex = (transitionNum, index, val) => {\n    var transitions = this.state.transitions\n    transitions[transitionNum][index] = val\n    this.setState({\n      transitions: transitions\n    })\n  }\n\n  render (){\n    var hasOpData = this.props.location && this.props.location.operation\n    var hasPropsData = this.props.location && this.props.location.data\n    return (\n      <div id=\"pda_transitions\" className=\"wrapper\">\n        <Header/>\n        <h1 className='dnfaInput'>PDA TRANSITIONS</h1>\n        <h3 onClick={ () => {\n          var showInstructions = this.state.showInstructions\n          this.setState({ showInstructions: !showInstructions })\n        }}>\n          {'INSTRUCTIONS ' + (this.state.showInstructions ? '↑' : '↓')}\n        </h3>\n        {this.state.showInstructions && (\n          <div>\n            <div className=\"instructions\">\n              {\"If all symbols in the stack alphabet are only one character,\"}\n              {\" for a transition δ(q0, a, X) = (q1, XY), write the transition exactly as it appears.\"}\n            </div>\n            <div className=\"instructions\">\n              {\"If any symbol in the stack alphabet is longer than one character, stack symbols should be separated by space. \"}\n              {'For example, δ(q0, a, X0) = (q1, X0 Y0)'}\n            </div>\n            <div className=\"instructions\" style={{ fontWeight: 'bold'}}>\n              {\"To represent the empty transition or a deletion from the top of the stack, use ε (this one can be copy/pasted).\"}\n            </div>\n          </div>\n        )}\n        <div className=\"pdaBox\">\n          {this.state.transitions && (\n            <table className=\"center\" id=\"pda_inp_table\">\n            <tbody id=\"pda_tab_body\">\n\n              {Array.from(Array(this.state.transitions.length).keys()).map( (row) => (\n                <tr>\n                  <td className=\"input\">\n                    <label className=\"biglabel\">δ ( </label>\n                    <input\n                      type=\"text\"\n                      className=\"smallbox\"\n                      onChange={ event => this.changeAtIndex(row, 0, event.target.value) }\n                    />\n                    <label className=\"biglabel\"> , </label>\n                    <input\n                      type=\"text\"\n                      className=\"smallbox\"\n                      onChange={ event => this.changeAtIndex(row, 1, event.target.value) }\n                    />\n                    <label className=\"biglabel\"> , </label>\n                    <input\n                      type=\"text\"\n                      className=\"smallbox\"\n                      onChange={ event => this.changeAtIndex(row, 2, event.target.value) }\n                    />\n                    <label className=\"biglabel\"> ) = ( </label>\n                    <input\n                      type=\"text\"\n                      className=\"smallbox\"\n                      onChange={ event => this.changeAtIndex(row, 3, event.target.value) }\n                    />\n                    <label className=\"biglabel\"> , </label>\n                    <input\n                      type=\"text\"\n                      className=\"mediumbox\"\n                      onChange={ event => this.changeAtIndex(row, 4, event.target.value) }\n                    />\n                    <label className=\"biglabel\"> )</label>\n                  </td>\n                </tr>\n              ))}\n\n            </tbody>\n          </table>)}\n        </div>\n        <button onClick={this.addRow.bind(null)} className=\"enterButton\">+</button>\n        { !this.state.answer && (\n          <button\n          id=\"pda_enter\"\n          className=\"enterButton\"\n          onClick={this.makeFlaskPost.bind(null, ({\n            conversionType: this.props.location.operation,\n            transitions: this.state.transitions,\n            alphabet: hasPropsData ? this.props.location.data.alphabet : [],\n            startStates: hasPropsData ? this.props.location.data.startStates : null,\n            acceptStates: hasPropsData ? this.props.location.data.acceptStates : [],\n            stackAlphabet: hasPropsData ? this.props.location.data.stackAlphabet : [],\n            initStackSym: hasPropsData ? this.props.location.data.initStackSym : null\n          }), ApiRoutes.pdaInput)}\n          >\n            Enter\n          </button>\n        )}\n\n        { this.state.answer &&\n          <Redirect to={{\n            pathname: this.determinePath(hasOpData ? this.props.location.operation : ''),\n            answer: this.state.answer\n          }} />\n        }\n\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport { Redirect } from 'react-router-dom'\nimport ApiRoutes from '../ApiRoutes'\nimport Routes from '../Routes'\nimport AutomataInput from '../inputInfo/AutomataInput'\nimport Conversions from '../Conversions'\nimport Header from '../Header'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  rules: any,\n  startSym: string,\n  showOps: boolean,\n  opSelection: string,\n  opSelectionText: string\n}\n\nexport default class CFGAns extends AutomataInput {\n  constructor(props:Props){\n    super(props)\n    this.state = {\n      rules: null, //{}\n      startSym: null,\n      showOps: false\n    }\n  }\n\n  componentDidMount (){\n    //console.log(this.props.location.answer)\n    if (this.props.location && this.props.location.answer){\n      this.setState({\n        rules: this.props.location.answer.rules,\n        startSym: this.props.location.answer.startSym\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.location && this.props.location.answer &&\n    ((!prevProps.location.answer.startSym && this.props.location.answer.startSym) ||\n    prevProps.location.answer.rules !== this.props.location.answer.rules)){\n      this.setState({\n        rules: this.props.location.answer.rules,\n        startSym: this.props.location.answer.startSym\n      })\n    }\n  }\n\n  setSelection = (selection, text) => {\n    this.setState({\n      opSelection: selection,\n      opSelectionText: text,\n      showOps: false\n    })\n  }\n  render() {\n    var postBody = {\n      fromInput: false,\n      rules: this.state.rules,\n      startSym: this.state.startSym\n    }\n\n    return (\n      <div id=\"dnfa_ans\" className=\"wrapper\">\n        <Header/>\n        <h1 className='regex'>CFG Answer</h1>\n        <div className='cfgBox'>\n          { this.state.rules && (\n            Object.keys(this.state.rules).map( (nt, index) => (\n              <div>\n                <label>{nt + (nt === this.state.startSym ? '*' : '') + ' → ' }</label>\n                <input\n                  type=\"text\"\n                  value={this.state.rules[nt].join(' | ')}\n                  onChange={(event) => {}}\n                />\n                <br/><br/>\n              </div>\n              //nt --> prods\n            ))\n          )}\n        </div>\n        {!this.state.answer && (\n          <div>\n            <div className=\"dropdown\">\n              <button\n                className=\"enterButton\"\n                onClick={() => {\n                  var showOps = this.state.showOps\n                  this.setState({ showOps: !showOps })\n                }}>\n                Show Options ↓\n              </button>\n              { this.state.showOps === true && (\n                <div className=\"dropdownOptions\">\n                  <div onClick={this.setSelection.bind(null, Conversions.cfgToPda, 'CFG to PDA')}>CFG to PDA</div>\n                  <div onClick={this.setSelection.bind(null, Conversions.simplifyGrammar, 'Simplify Grammar')}>Simplify Grammar</div>\n                  <div onClick={this.setSelection.bind(null, Conversions.elimNull, 'Eliminate Null Productions')}>Eliminate Null Productions</div>\n                  <div onClick={this.setSelection.bind(null, Conversions.elimUnit, 'Eliminate Unit Productions')}>Eliminate Unit Productions</div>\n                  <div onClick={this.setSelection.bind(null, Conversions.chomsky, 'Chomsky Normal Form')}>Chomsky Normal Form</div>\n                  <div onClick={this.setSelection.bind(null, Conversions.greibach, 'Greibach Normal Form')}>Greibach Normal Form</div>\n                  <div onClick={this.setSelection.bind(null, Conversions.ffpSets, 'First, Follow, and Predict Sets')}>First, Follow, and Predict Sets</div>\n                  <div onClick={this.setSelection.bind(null, Conversions.parseTable, 'Parse Table')}>Parse Table</div>\n                  <div onClick={this.setSelection.bind(null, Conversions.leftRecursion, 'Remove Left Recursion')}>Remove Left Recursion</div>\n                  <div onClick={this.setSelection.bind(null, Conversions.commonSubexpression, 'Eliminate Common Subexpression')}>Eliminate Common Subexpression</div>\n                </div>\n              )}\n            </div>\n            {this.state.opSelection && (\n              <button\n                className=\"enterButton\"\n                onClick={this.makeFlaskPostFromAns.bind(null, postBody,\n                  ApiRoutes.cfgInput, this.state.opSelection)}\n              >\n                {this.state.opSelectionText}\n              </button>\n            )}\n          </div>\n        )}\n\n        { this.state.answer && this.state.opSelection &&\n          <Redirect to={{\n            pathname: this.determinePath(this.state.opSelection ? this.state.opSelection : ''),\n            answer: this.state.answer\n          }}\n            onClick={this.setState({ answer: null })} />\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport Header from '../Header'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  //rules: any,\n  //startSym: string,\n  firsts: any,\n  follows: any,\n  predicts: any\n}\n\nexport default class SetAns extends React.Component {\n  constructor(props:Props){\n    super(props)\n    this.state = {\n      // rules: null, //{}\n      // startSym: ''\n      firsts: null,\n      follows: null,\n      predicts: null\n    }\n  }\n\n  componentDidMount (){\n    //console.log(this.props.location.answer)\n    if (this.props.location && this.props.location.answer){\n      this.setState({\n        // rules: this.props.location.answer.rules,\n        // startSym: this.props.location.answer.startSym\n        firsts: this.props.location.answer.firsts,\n        follows: this.props.location.answer.follows,\n        predicts: this.props.location.answer.predicts\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    //console.log('update')\n    //console.log(this.props.location.answer.alphabet)\n    if (this.props.location && this.props.location.answer &&\n    !prevProps.location.answer.firsts && this.props.location.answer.firsts){\n      this.setState({\n        // rules: this.props.location.answer.rules,\n        // startSym: this.props.location.answer.startSym\n        firsts: this.props.location.answer.firsts,\n        follows: this.props.location.answer.follows,\n        predicts: this.props.location.answer.predicts\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"sets_ans\" className=\"wrapper\">\n        <Header/>\n        <h1 className='dnfaInput'>FIRST SETS</h1>\n        <div className='dfaBox setBox'>\n          { this.state.firsts && (\n            Object.keys(this.state.firsts).map( (nt, index) => (\n              <div>\n                <label style={{ paddingRight: '10px' }}>{'FIRST(' + nt + ') → {' }</label>\n                <input\n                  type=\"text\"\n                  value={this.state.firsts[nt].join(', ')}\n                  onChange={(event) => {}}\n                />\n                <label style={{ paddingLeft: '10px' }}>}</label>\n                <br/><br/>\n              </div>\n            ))\n          )}\n        </div>\n        <h1 className='dnfaInput'>FOLLOW SETS</h1>\n        <div className='dfaBox setBox'>\n          { this.state.follows && (\n            Object.keys(this.state.follows).map( (nt, index) => (\n              <div>\n                <label style={{ paddingRight: '10px' }}>{'FOLLOW(' + nt + ') → {' }</label>\n                <input\n                  type=\"text\"\n                  value={this.state.follows[nt].join(', ')}\n                  onChange={(event) => {}}\n                />\n                <label style={{ paddingLeft: '10px' }}>}</label>\n                <br/><br/>\n              </div>\n            ))\n          )}\n        </div>\n        <h1 className='dnfaInput'>PREDICT SETS</h1>\n        <div className='dfaBox setBox'>\n          { this.state.predicts && (\n            Object.keys(this.state.predicts).map( (nt, index) => (\n              <div>\n                <label style={{ paddingRight: '10px' }}>{'PREDICT(' + nt + ') → {' }</label>\n                <input\n                  type=\"text\"\n                  value={this.state.predicts[nt].join(', ')}\n                  onChange={(event) => {}}\n                />\n                <label style={{ paddingLeft: '10px' }}>}</label>\n                <br/><br/>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport { Redirect } from 'react-router-dom'\nimport ApiRoutes from '../ApiRoutes'\nimport Routes from '../Routes'\nimport AutomataInput from '../inputInfo/AutomataInput'\nimport Conversions from '../Conversions'\nimport Header from '../Header'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  transitions: any,\n  startState: string,\n  acceptStates: Array<string>,\n  inputAlphabet: Array<string>,\n  stackAlphabet: Array<string>,\n  initStackSymbol: string\n}\n\nexport default class PDAns extends AutomataInput {\n  constructor(props:Props){\n    super(props)\n    this.state = {\n      rules: null, //{}\n      startSym: null\n    }\n  }\n\n  componentDidMount (){\n    //console.log(this.props.location.answer)\n    if (this.props.location && this.props.location.answer){\n      this.setState({\n        transitions: this.props.location.answer.transitions,\n        startState: this.props.location.answer.startState,\n        acceptStates: this.props.location.answer.acceptStates,\n        inputAlphabet: this.props.location.answer.inputAlphabet,\n        stackAlphabet: this.props.location.answer.stackAlphabet,\n        initStackSymbol: this.props.location.answer.initStackSymbol\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    //console.log('update')\n    //console.log(this.props.location.answer.alphabet)\n    if (this.props.location && this.props.location.answer &&\n    !prevProps.location.answer.transitions && this.props.location.answer.transitions){\n      this.setState({\n        transitions: this.props.location.answer.transitions,\n        startState: this.props.location.answer.startState,\n        acceptStates: this.props.location.answer.acceptStates,\n        inputAlphabet: this.props.location.answer.inputAlphabet,\n        stackAlphabet: this.props.location.answer.stackAlphabet,\n        initStackSymbol: this.props.location.answer.initStackSymbol\n      })\n    }\n  }\n\n  render() {\n    var postBody = {\n      transitions: this.state.transitions,\n      alphabet: this.state.inputAlphabet ? this.state.inputAlphabet : [],\n      startStates: this.state.startState ? this.state.startState : null,\n      acceptStates: this.state.acceptStates ? this.state.acceptStates : [],\n      stackAlphabet: this.state.stackAlphabet ? this.state.stackAlphabet : [],\n      initStackSym: this.state.initStackSymbol ? this.state.initStackSymbol : null\n    }\n    return (\n      <div id=\"pda_ans\">\n        <Header/>\n        <h1 className='dnfaChartTitle'>PDA INFORMATION</h1>\n        <div >\n          {this.state.startState && (\n            <div className=\"inputBox\">\n              <div>\n                <label>START STATE: </label>\n              </div>\n              <div>\n                <input\n                  type=\"text\"\n                  value={this.state.startState}\n                  onChange={ event => this.setState({ startState: event.target.value })}\n                />\n                <br/><br/>\n              </div>\n              <div>\n                <label>ACCEPT STATE(S): </label>\n              </div>\n              <div>\n                <input\n                  type=\"text\"\n                  value={this.state.acceptStates.join(' ')}\n                  onChange={ event => this.setState({ acceptStates: event.target.value.split() })}\n                />\n                <br/><br/>\n              </div>\n              <div>\n                <label>INPUT ALPHABET: </label>\n              </div>\n              <div>\n                <input\n                  type=\"text\"\n                  value={this.state.inputAlphabet.join(' ')}\n                  onChange={ event => this.setState({ acceptStates: event.target.value.split() })}\n                />\n                <br/><br/>\n              </div>\n              <div>\n                <label>STACK ALPHABET: </label>\n              </div>\n              <div>\n                <input\n                  type=\"text\"\n                  value={this.state.stackAlphabet.join(' ')}\n                  onChange={ event => this.setState({ acceptStates: event.target.value.split() })}\n                />\n                <br/><br/>\n              </div>\n              <div>\n                <label>INITIAL STACK SYMBOL: </label>\n              </div>\n              <div>\n                <input\n                  type=\"text\"\n                  value={this.state.initStackSymbol}\n                  onChange={ event => this.setState({ acceptStates: event.target.value.split() })}\n                />\n                <br/><br/>\n              </div>\n            </div>\n          )}\n        </div>\n        <h1 className=\"dnfaInput\">PDA Answer</h1>\n        <div className=\"pdaBox\">\n          {this.state.transitions && (\n            <table className=\"center\" id=\"pda_inp_table\">\n            <tbody id=\"pda_tab_body\">\n\n              {Array.from(Array(this.state.transitions.length).keys()).map( (row) => (\n                <tr>\n                  <td className=\"input\">\n                    <label className=\"biglabel\">δ ( </label>\n                    <input\n                      type=\"text\"\n                      className=\"smallbox\"\n                      value={ this.state.transitions[row][0] }\n                      onChange={ event => {/*this.changeAtIndex(row, 0, event.target.value)*/} }\n                    />\n                    <label className=\"biglabel\"> , </label>\n                    <input\n                      type=\"text\"\n                      className=\"smallbox\"\n                      value={ this.state.transitions[row][1] }\n                      onChange={ event => {/*this.changeAtIndex(row, 0, event.target.value)*/} }\n                    />\n                    <label className=\"biglabel\"> , </label>\n                    <input\n                      type=\"text\"\n                      className=\"smallbox\"\n                      value={ this.state.transitions[row][2] }\n                      onChange={ event => {/*this.changeAtIndex(row, 0, event.target.value)*/} }\n                    />\n                    <label className=\"biglabel\"> ) = ( </label>\n                    <input\n                      type=\"text\"\n                      className=\"smallbox\"\n                      value={ this.state.transitions[row][3] }\n                      onChange={ event => {/*this.changeAtIndex(row, 0, event.target.value)*/} }\n                    />\n                    <label className=\"biglabel\"> , </label>\n                    <input\n                      type=\"text\"\n                      className=\"mediumbox\"\n                      value={ this.state.transitions[row][4] }\n                      onChange={ event => {/*this.changeAtIndex(row, 0, event.target.value)*/} }\n                    />\n                    <label className=\"biglabel\"> )</label>\n                  </td>\n                </tr>\n              ))}\n\n            </tbody>\n          </table>)}\n        </div>\n        { !this.state.answer && (\n          <div className=\"wrapper\">\n            <button\n            className=\"enterButton\"\n            onClick={this.makeFlaskPostFromAns.bind(null, postBody,\n              ApiRoutes.pdaInput, Conversions.pdaToCfg)}\n            >\n              PDA to CFG\n            </button>\n          </div>\n        )}\n        { this.state.answer && this.state.conversionType &&\n          <Redirect to={{\n            pathname: this.determinePath(this.state.conversionType ? this.state.conversionType : ''),\n            answer: this.state.answer\n          }}\n            onClick={this.setState({ answer: null })} />\n        }\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport '../App.css';\nimport { Link } from 'react-router-dom'\nimport Header from '../Header'\n\ntype Props = {\n  location?: any\n}\n\ntype State = {\n  terminals: Array<any>,\n  nonterminals: Array<any>,\n  table: Array<Array<any>>\n}\n\nexport default class TableAns extends React.Component {\n  constructor(props:Props){\n    super(props)\n    this.state = {\n      terminals: [],\n      nonterminals: [],\n      table: []\n    }\n  }\n\n  componentDidMount (){\n    console.log(this.props.location.answer)\n    if (this.props.location && this.props.location.answer){\n      this.setState({\n        terminals: this.props.location.answer.terminals,\n        nonterminals: this.props.location.answer.nonterminals,\n        table: this.props.location.answer.table\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    console.log(this.props.location.answer)\n    if (this.props.location && this.props.location.answer &&\n    !prevProps.location.answer.terminals && this.props.location.answer.terminals){\n      this.setState({\n        terminals: this.props.location.answer.terminals,\n        nonterminals: this.props.location.answer.nonterminals,\n        table: this.props.location.answer.table\n      })\n    }\n  }\n\n  render() {\n    var width\n    if (this.state.terminals.length > 0){\n      width = 238*(this.state.terminals + 1) + 100\n      width = width.toString() + 'px'\n    } else {\n      width = '100%'\n    }\n\n    return (\n      <div className=\"wrapper\">\n        <Header/>\n        <h1 className='dnfaInput'>PARSE TABLE</h1>\n        <div className='dfaBox' style={{ width: width }}>\n          { this.state.terminals.length > 0 && this.state.nonterminals.length > 0 &&\n            this.state.table.length > 0 && (\n            <table id='original_table' className='center'>\n              <thead>\n                <tr>\n                  <th></th>\n                  {this.state.terminals.map( (letter) => (\n                    <th key={letter}>{letter}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n              {\n                this.state.nonterminals.map( (nt, row) => (\n                  <tr>\n                    {\n                      Array.from(Array(this.state.terminals.length + 1).keys()).map((col) => (\n                        <td>\n                          {col === 0 && (\n                            <label style={{ paddingRight: '5px' }}>{nt}</label>\n                          )}\n                          {col !== 0 && (\n                            <input\n                              type='text'\n                              key={row + ' ' + col}\n                              value={this.state.table[row][col-1]}\n                              onChange={ (event) => {} }\n                            />\n                          )}\n                        </td>\n                      ))\n                    }\n                  </tr>\n                ))\n              }\n              </tbody>\n            </table>\n            )\n          }\n        </div>\n\n      </div>\n    )\n  }\n}\n","import './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Automata from './Automata'\nimport DFAOps from './automataTypes/DFAOps'\nimport NFAOps from './automataTypes/NFAOps'\nimport RegexOps from './automataTypes/RegexOps'\nimport CFGOps from './automataTypes/CFGOps'\nimport PDAOps from './automataTypes/PDAOps'\nimport DNFAGenerator from './inputInfo/DNFAGenerator'\nimport DNFAInput from './inputInfo/DNFAInput'\nimport RegexAns from './results/RegexAns'\nimport DFAns from './results/DFAns'\nimport RegexInput from './inputInfo/RegexInput'\nimport CFGInput from './inputInfo/CFGInput'\nimport PDAGenerator from './inputInfo/PDAGenerator'\nimport PDAInput from './inputInfo/PDAInput'\nimport CFGAns from './results/CFGAns'\nimport SetAns from './results/SetAns'\nimport PDAns from './results/PDAns'\nimport TableAns from './results/TableAns'\nimport Routes from './Routes'\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={Routes.home} component={Automata} />\n        <Route exact path={Routes.dfa} component={DFAOps} />\n        <Route exact path={Routes.nfa} component={NFAOps} />\n        <Route exact path={Routes.regex} component={RegexOps} />\n        <Route exact path={Routes.cfg} component={CFGOps} />\n        <Route exact path={Routes.pda} component={PDAOps} />\n        <Route path={Routes.dnfaGenerator} component={DNFAGenerator} />\n        <Route path={Routes.dnfaInput} component={DNFAInput} />\n        <Route path={Routes.regexAnswer} component={RegexAns} />\n        <Route path={Routes.dfaAnswer} component={DFAns} />\n        <Route path={Routes.regexInput} component={RegexInput} />\n        <Route path={Routes.pdaGenerator} component={PDAGenerator} />\n        <Route path={Routes.pdaInput} component={PDAInput} />\n        <Route path={Routes.cfgAnswer} component={CFGAns} />\n        <Route path={Routes.cfgInput} component={CFGInput} />\n        <Route path={Routes.setsAnswer} component={SetAns} />\n        <Route path={Routes.pdaAnswer} component={PDAns} />\n        <Route path={Routes.tableAnswer} component={TableAns} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}